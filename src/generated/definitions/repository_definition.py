#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class RepositoryDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, delphix_tookit_path=None, ora_edition=None, ora_base=None, toolkit_name=None, ora_home=None, pretty_name=None, validate=True):
        """RepositoryDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param delphix_tookit_path: The delphix_tookit_path of this RepositoryDefinition.
            :type delphix_tookit_path: str
            :param ora_edition: The ora_edition of this RepositoryDefinition.
            :type ora_edition: str
            :param ora_base: The ora_base of this RepositoryDefinition.
            :type ora_base: str
            :param toolkit_name: The toolkit_name of this RepositoryDefinition.
            :type toolkit_name: str
            :param ora_home: The ora_home of this RepositoryDefinition.
            :type ora_home: str
            :param pretty_name: The pretty_name of this RepositoryDefinition.
            :type pretty_name: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'delphix_tookit_path': str,
            'ora_edition': str,
            'ora_base': str,
            'toolkit_name': str,
            'ora_home': str,
            'pretty_name': str
        }

        self.attribute_map = {
            'delphix_tookit_path': 'delphixTookitPath',
            'ora_edition': 'oraEdition',
            'ora_base': 'oraBase',
            'toolkit_name': 'toolkitName',
            'ora_home': 'oraHome',
            'pretty_name': 'prettyName'
        }
        
        # Validating the attribute delphix_tookit_path and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'delphix_tookit_path',
                                                          delphix_tookit_path,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._delphix_tookit_path = delphix_tookit_path

        # Validating the attribute ora_edition and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_edition',
                                                          ora_edition,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._ora_edition = ora_edition

        # Validating the attribute ora_base and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_base',
                                                          ora_base,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._ora_base = ora_base

        # Validating the attribute toolkit_name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'toolkit_name',
                                                          toolkit_name,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._toolkit_name = toolkit_name

        # Validating the attribute ora_home and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_home',
                                                          ora_home,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._ora_home = ora_home

        # Validating the attribute pretty_name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'pretty_name',
                                                          pretty_name,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._pretty_name = pretty_name
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The repositoryDefinition of this RepositoryDefinition.
        :rtype: RepositoryDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delphix_tookit_path(self):
        """Gets the delphix_tookit_path of this RepositoryDefinition.

        

        :return: The delphix_tookit_path of this RepositoryDefinition.
        :rtype: str
        """
        return self._delphix_tookit_path

    @delphix_tookit_path.setter
    def delphix_tookit_path(self, delphix_tookit_path):
        """Sets the delphix_tookit_path of this RepositoryDefinition.

        

        :param delphix_tookit_path: The delphix_tookit_path of this RepositoryDefinition.
        :type delphix_tookit_path: str
        """
        # Validating the attribute delphix_tookit_path and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'delphix_tookit_path',
                                                          delphix_tookit_path,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._delphix_tookit_path = delphix_tookit_path

    @property
    def ora_edition(self):
        """Gets the ora_edition of this RepositoryDefinition.

        

        :return: The ora_edition of this RepositoryDefinition.
        :rtype: str
        """
        return self._ora_edition

    @ora_edition.setter
    def ora_edition(self, ora_edition):
        """Sets the ora_edition of this RepositoryDefinition.

        

        :param ora_edition: The ora_edition of this RepositoryDefinition.
        :type ora_edition: str
        """
        # Validating the attribute ora_edition and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_edition',
                                                          ora_edition,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._ora_edition = ora_edition

    @property
    def ora_base(self):
        """Gets the ora_base of this RepositoryDefinition.

        

        :return: The ora_base of this RepositoryDefinition.
        :rtype: str
        """
        return self._ora_base

    @ora_base.setter
    def ora_base(self, ora_base):
        """Sets the ora_base of this RepositoryDefinition.

        

        :param ora_base: The ora_base of this RepositoryDefinition.
        :type ora_base: str
        """
        # Validating the attribute ora_base and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_base',
                                                          ora_base,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._ora_base = ora_base

    @property
    def toolkit_name(self):
        """Gets the toolkit_name of this RepositoryDefinition.

        

        :return: The toolkit_name of this RepositoryDefinition.
        :rtype: str
        """
        return self._toolkit_name

    @toolkit_name.setter
    def toolkit_name(self, toolkit_name):
        """Sets the toolkit_name of this RepositoryDefinition.

        

        :param toolkit_name: The toolkit_name of this RepositoryDefinition.
        :type toolkit_name: str
        """
        # Validating the attribute toolkit_name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'toolkit_name',
                                                          toolkit_name,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._toolkit_name = toolkit_name

    @property
    def ora_home(self):
        """Gets the ora_home of this RepositoryDefinition.

        

        :return: The ora_home of this RepositoryDefinition.
        :rtype: str
        """
        return self._ora_home

    @ora_home.setter
    def ora_home(self, ora_home):
        """Sets the ora_home of this RepositoryDefinition.

        

        :param ora_home: The ora_home of this RepositoryDefinition.
        :type ora_home: str
        """
        # Validating the attribute ora_home and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'ora_home',
                                                          ora_home,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._ora_home = ora_home

    @property
    def pretty_name(self):
        """Gets the pretty_name of this RepositoryDefinition.

        

        :return: The pretty_name of this RepositoryDefinition.
        :rtype: str
        """
        return self._pretty_name

    @pretty_name.setter
    def pretty_name(self, pretty_name):
        """Sets the pretty_name of this RepositoryDefinition.

        

        :param pretty_name: The pretty_name of this RepositoryDefinition.
        :type pretty_name: str
        """
        # Validating the attribute pretty_name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'pretty_name',
                                                          pretty_name,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._pretty_name = pretty_name
